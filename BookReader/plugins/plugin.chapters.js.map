{"version":3,"file":"plugins/plugin.chapters.js","mappings":"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","sources":["webpack://@internetarchive/bookreader/./src/plugins/plugin.chapters.js"],"sourcesContent":["/* global BookReader */\r\n/**\r\n * Plugin for chapter markers in BookReader. Fetches from openlibrary.org\r\n * Could be forked, or extended to alter behavior\r\n */\r\n\r\njQuery.extend(BookReader.defaultOptions, {\r\n  olHost: 'https://openlibrary.org',\r\n  enableChaptersPlugin: true,\r\n  bookId: '',\r\n});\r\n\r\n/** @override Extend the constructor to add search properties */\r\nBookReader.prototype.setup = (function (super_) {\r\n  return function (options) {\r\n    super_.call(this, options);\r\n\r\n    this.olHost = options.olHost;\r\n    this.enableChaptersPlugin = options.enableChaptersPlugin;\r\n    this.bookId = options.bookId;\r\n  };\r\n})(BookReader.prototype.setup);\r\n\r\n/** @override Extend to call Open Library for TOC */\r\nBookReader.prototype.init = (function(super_) {\r\n  return function() {\r\n    super_.call(this);\r\n    if (this.enableChaptersPlugin && this.ui !== 'embed') {\r\n      this.getOpenLibraryRecord();\r\n    }\r\n    if (this.enableMobileNav) {\r\n      this.bind(BookReader.eventNames.mobileNavOpen,\r\n        () => {\r\n          this.updateTOCState(this.firstIndex, this._tocEntries);\r\n          if ($('table-contents-list').parent().hasClass('mm-opened')) {\r\n            this.updateTOCState(this.firstIndex, this._tocEntries);\r\n          }\r\n        }\r\n      );\r\n      $(\".BRmobileMenu__tableContents\").on(\"click\", () => {\r\n        this.updateTOCState(this.firstIndex, this._tocEntries);\r\n      });\r\n    }\r\n  };\r\n})(BookReader.prototype.init);\r\n\r\n/**\r\n * Adds chapter marker to navigation scrubber\r\n *\r\n * @param {string} chapterTitle\r\n * @param {string} pageNumber\r\n * @param {number} pageIndex\r\n */\r\nBookReader.prototype.addChapter = function(chapterTitle, pageNumber, pageIndex) {\r\n  const uiStringPage = 'Page'; // i18n\r\n  const percentThrough = BookReader.util.cssPercentage(pageIndex, this.book.getNumLeafs() - 1);\r\n  const jumpToChapter = (event) => {\r\n    this.jumpToIndex($(event.delegateTarget).data('pageIndex'));\r\n    $('.current-chapter').removeClass('current-chapter');\r\n    $(event.delegateTarget).addClass('current-chapter');\r\n  };\r\n  const title = `${chapterTitle} | `;\r\n  const pageStr = `${uiStringPage} ${pageNumber}`;\r\n\r\n  //adding items to mobile table of contents\r\n  const mobileChapter = $(`<li></li>`).append($(`<span class='BRTOCElementTitle'></span>`).text(title))\r\n    .append($(`<span class='BRTOCElementPage'></span>`).text(pageStr));\r\n  mobileChapter.addClass('BRtable-contents-el')\r\n    .appendTo(this.$('.table-contents-list'))\r\n    .data({ pageIndex });\r\n\r\n  //adds .BRchapters to the slider only if pageIndex exists\r\n  if (pageIndex != undefined) {\r\n    $(`<div></div>`)\r\n      .append($('<div />').text(title + pageStr))\r\n      .addClass('BRchapter')\r\n      .css({ left: percentThrough })\r\n      .appendTo(this.$('.BRnavline'))\r\n      .data({ pageIndex })\r\n      .on(\"mouseenter\", event => {\r\n        // remove hover effect from other markers then turn on just for this\r\n        const marker = event.currentTarget;\r\n        const tooltip = marker.querySelector('div');\r\n        const tooltipOffset = tooltip.getBoundingClientRect();\r\n        const targetOffset = marker.getBoundingClientRect();\r\n        const boxSizeAdjust = parseInt(getComputedStyle(tooltip).paddingLeft) * 2;\r\n        if (tooltipOffset.x - boxSizeAdjust < 0) {\r\n          tooltip.style.setProperty('transform', `translateX(-${targetOffset.left - boxSizeAdjust}px)`);\r\n        }\r\n        this.$('.BRsearch,.BRchapter').removeClass('front');\r\n        $(event.target).addClass('front');\r\n      })\r\n      .on(\"mouseleave\", event => $(event.target).removeClass('front'))\r\n      .on('click', jumpToChapter);\r\n\r\n    //adding clickable properties to mobile chapters\r\n    mobileChapter.bind('click', jumpToChapter)\r\n      .addClass('chapter-clickable')\r\n      .attr(\"data-event-click-tracking\",\"BRTOCPanel|GoToChapter\");\r\n  }\r\n\r\n};\r\n\r\n/*\r\n * Remove all chapters.\r\n */\r\nBookReader.prototype.removeChapters = function() {\r\n  this.$('.BRnavpos .BRchapter').remove();\r\n};\r\n\r\n/**\r\n * Update the table of contents based on array of TOC entries.\r\n * @param {TocEntry[]} tocEntries\r\n */\r\nBookReader.prototype.updateTOC = function(tocEntries) {\r\n  this.removeChapters();\r\n  if (this.enableMobileNav && tocEntries.length > 0) {\r\n    this.$(\".BRmobileMenu__tableContents\").show();\r\n  }\r\n  for (let i = 0; i < tocEntries.length; i++) {\r\n    this.addChapterFromEntry(tocEntries[i]);\r\n  }\r\n  this._tocEntries = tocEntries;\r\n  $('.table-contents-list').children().each((i, el) => {\r\n    tocEntries[i].mobileHTML = el;\r\n  });\r\n};\r\n\r\n/**\r\n * @typedef {Object} TocEntry\r\n * Table of contents entry as defined -- format is defined by Open Library\r\n * @property {string} pagenum\r\n * @property {number} level\r\n * @property {string} label\r\n * @property {{type: '/type/toc_item'}} type\r\n * @property {string} title\r\n * @property {HTMLElement} mobileHTML\r\n * @property {number} pageIndex\r\n\r\n *\r\n * @example {\r\n *   \"pagenum\": \"17\",\r\n *   \"level\": 1,\r\n *   \"label\": \"CHAPTER I\",\r\n *   \"type\": {\"key\": \"/type/toc_item\"},\r\n *   \"title\": \"THE COUNTRY AND THE MISSION\"\r\n * }\r\n */\r\n\r\n/**\r\n * @param {TocEntry} tocEntryObject\r\n */\r\nBookReader.prototype.addChapterFromEntry = function(tocEntryObject) {\r\n  tocEntryObject.pageIndex = this.book.getPageIndex(tocEntryObject['pagenum']);\r\n  //creates a string with non-void tocEntryObject.label and tocEntryObject.title\r\n  const chapterStr = [tocEntryObject.label, tocEntryObject.title]\r\n    .filter(x => x)\r\n    .join(' ');\r\n  this.addChapter(chapterStr, tocEntryObject['pagenum'], tocEntryObject.pageIndex);\r\n  this.$('.BRchapter, .BRsearch').each((i, el) => {\r\n    const $el = $(el);\r\n    $el\r\n      .on(\"mouseenter\", () => $el.addClass('front'))\r\n      .on(\"mouseleave\", () => $el.removeClass('front'));\r\n  });\r\n};\r\n\r\n/**\r\n * getOpenLibraryRecord\r\n *\r\n * The bookreader is designed to call openlibrary API and constructs the\r\n * \"Return book\" button using the response.\r\n *\r\n * This makes a call to OL API and calls the given callback function with the\r\n * response from the API.\r\n */\r\nBookReader.prototype.getOpenLibraryRecord = async function () {\r\n  // Try looking up by ocaid first, then by source_record\r\n  const baseURL = `${this.olHost}/query.json?type=/type/edition&*=`;\r\n  const fetchUrlByBookId = `${baseURL}&ocaid=${this.bookId}`;\r\n\r\n  /*\r\n  * Update Chapter markers based on received record from Open Library.\r\n  * Notes that Open Library record is used for extra metadata, and also for lending\r\n  */\r\n  const setUpChapterMarkers = (olObject) => {\r\n    if (olObject && olObject.table_of_contents) {\r\n      // XXX check here that TOC is valid\r\n      this.updateTOC(olObject.table_of_contents);\r\n    }\r\n  };\r\n\r\n  let data = await $.ajax({ url: fetchUrlByBookId, dataType: 'jsonp' });\r\n\r\n  if (!data || !data.length) {\r\n    // try sourceid\r\n    data = await $.ajax({ url: `${baseURL}&source_records=ia:${this.bookId}`, dataType: 'jsonp' });\r\n  }\r\n\r\n  if (data && data.length > 0) {\r\n    setUpChapterMarkers(data[0]);\r\n  }\r\n};\r\n\r\n// Extend buildMobileDrawerElement with table of contents list\r\nBookReader.prototype.buildMobileDrawerElement = (function (super_) {\r\n  return function () {\r\n    const $el = super_.call(this);\r\n    if (this.enableMobileNav && this.options.enableChaptersPlugin) {\r\n      $el.find('.BRmobileMenu__moreInfoRow').after($(`\r\n        <li class=\"BRmobileMenu__tableContents\" data-event-click-tracking=\"BRSidebar|TOCPanel\">\r\n            <span>\r\n                <span class=\"DrawerIconWrapper\">\r\n                  <img class=\"DrawerIcon\" src=\"${this.imagesBaseURL}icon_toc.svg\" alt=\"toc-icon\"/>\r\n                </span>\r\n                Table of Contents\r\n            </span>\r\n            <div>\r\n                <ol class=\"table-contents-list\">\r\n                </ol>\r\n            </div>\r\n        </li>`).hide());\r\n    }\r\n    return $el;\r\n  };\r\n})(BookReader.prototype.buildMobileDrawerElement);\r\n\r\n/**\r\n * highlights the current chapter based on current page\r\n * @private\r\n * @param {TocEntry[]} tocEntries\r\n * @param {number} tocEntries\r\n */\r\nBookReader.prototype.updateTOCState = function(currIndex, tocEntries) {\r\n  //this function won't have any effects if called before OpenLibrary request is finished\r\n  if (!tocEntries) {return;}\r\n  $('.current-chapter').removeClass('current-chapter');\r\n  const tocEntriesIndexed = tocEntries.filter((el) => el.pageIndex != undefined).reverse();\r\n  const currChapter = tocEntriesIndexed[tocEntriesIndexed.findIndex(\r\n    (el) => el.pageIndex <= currIndex)];\r\n  if (currChapter != undefined) {\r\n    $(currChapter.mobileHTML).addClass('current-chapter');\r\n  }\r\n};\r\n"],"names":["super_","jQuery","extend","BookReader","defaultOptions","olHost","enableChaptersPlugin","bookId","prototype","setup","options","call","this","init","ui","getOpenLibraryRecord","enableMobileNav","bind","eventNames","mobileNavOpen","updateTOCState","firstIndex","_tocEntries","$","parent","hasClass","on","addChapter","chapterTitle","pageNumber","pageIndex","percentThrough","util","cssPercentage","book","getNumLeafs","jumpToChapter","event","jumpToIndex","delegateTarget","data","removeClass","addClass","title","pageStr","mobileChapter","append","text","appendTo","undefined","css","left","marker","currentTarget","tooltip","querySelector","tooltipOffset","getBoundingClientRect","targetOffset","boxSizeAdjust","parseInt","getComputedStyle","paddingLeft","x","style","setProperty","target","attr","removeChapters","remove","updateTOC","tocEntries","length","show","i","addChapterFromEntry","children","each","el","mobileHTML","tocEntryObject","getPageIndex","chapterStr","label","filter","join","$el","baseURL","fetchUrlByBookId","setUpChapterMarkers","olObject","table_of_contents","ajax","url","dataType","buildMobileDrawerElement","find","after","imagesBaseURL","hide","currIndex","tocEntriesIndexed","reverse","currChapter","findIndex"],"sourceRoot":""}