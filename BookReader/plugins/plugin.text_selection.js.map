{"version":3,"file":"plugins/plugin.text_selection.js","mappings":"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","sources":["webpack://@internetarchive/bookreader/./src/BookReader/utils/SelectionStartedObserver.js","webpack://@internetarchive/bookreader/./src/util/strings.js","webpack://@internetarchive/bookreader/./src/plugins/plugin.text_selection.js","webpack://@internetarchive/bookreader/./src/util/browserSniffing.js","webpack://@internetarchive/bookreader/./node_modules/core-js/internals/number-parse-float.js","webpack://@internetarchive/bookreader/./node_modules/core-js/internals/string-trim-forced.js","webpack://@internetarchive/bookreader/./node_modules/core-js/modules/es.parse-float.js","webpack://@internetarchive/bookreader/./node_modules/core-js/modules/es.string.trim.js"],"sourcesContent":["// @ts-check\r\nexport class SelectionStartedObserver {\r\n  loggedForSelection = false;\r\n  startedInSelector = false;\r\n\r\n  /**\r\n   * @param {string} selector\r\n   * @param {function(): any} handler\r\n   */\r\n  constructor(selector, handler) {\r\n    this.selector = selector;\r\n    this.handler = handler;\r\n  }\r\n\r\n  attach() {\r\n    // We can't just use select start, because Chrome fires that willy\r\n    // nilly even when a user slightly long presses.\r\n    document.addEventListener(\"selectstart\", this._onSelectStart);\r\n    // This has to be on document :/\r\n    document.addEventListener(\"selectionchange\", this._onSelectionChange);\r\n  }\r\n\r\n  detach() {\r\n    document.removeEventListener(\"selectstart\", this._onSelectStart);\r\n    document.removeEventListener(\"selectionchange\", this._onSelectionChange);\r\n  }\r\n\r\n  /**\r\n   * @param {Event} ev\r\n   */\r\n  _onSelectStart = (ev) => {\r\n    this.loggedForSelection = false;\r\n    // Use jQuery because ev.target could be a Node (eg TextNode), which\r\n    // doesn't have .closest on it.\r\n    this.startedInSelector = $(ev.target).closest(this.selector).length > 0;\r\n  };\r\n\r\n  _onSelectionChange = () => {\r\n    if (this.loggedForSelection || !this.startedInSelector) return;\r\n    const sel = window.getSelection();\r\n    if (sel.toString()) {\r\n      this.loggedForSelection = true;\r\n      this.handler();\r\n    }\r\n  };\r\n}\r\n","/**\r\n * @typedef {String} StringWithVars\r\n * A template string with {{foo}} style variables\r\n * Also supports filters, like {{bookPath|urlencode}} (See APPLY_FILTERS for the\r\n * supported list of filters)\r\n **/\r\n\r\n/**\r\n * @param {StringWithVars|String} template\r\n * @param { {[varName: string]: { toString: () => string} } } vars\r\n * @param { {[varName: string]: { toString: () => string} } } [overrides]\r\n */\r\nexport function applyVariables(template, vars, overrides = {}, possibleFilters = APPLY_FILTERS) {\r\n  return template?.replace(/\\{\\{([^}]*?)\\}\\}/g, ($0, $1) => {\r\n    if (!$1) return $0;\r\n    /** @type {string} */\r\n    const expression = $1;\r\n    const [varName, ...filterNames] = expression.split('|').map(x => x.trim());\r\n    const defined = varName in overrides || varName in vars;\r\n\r\n    // If it's not defined, don't expand it at all\r\n    if (!defined) return $0;\r\n\r\n    const value = varName in overrides ? overrides[varName]\r\n      : varName in vars ? vars[varName] : null;\r\n    const filters = filterNames.map(n => possibleFilters[n]);\r\n    return filters.reduce((acc, cur) => cur(acc), value && value.toString());\r\n  });\r\n}\r\n\r\n/** @type { {[filterName: String]:( string => string)} } */\r\nexport const APPLY_FILTERS = {\r\n  urlencode: encodeURIComponent,\r\n};\r\n","//@ts-check\r\nimport { createSVGPageLayer } from '../BookReader/PageContainer.js';\r\nimport { SelectionStartedObserver } from '../BookReader/utils/SelectionStartedObserver.js';\r\nimport { isFirefox, isSafari } from '../util/browserSniffing.js';\r\nimport { applyVariables } from '../util/strings.js';\r\n/** @typedef {import('../util/strings.js').StringWithVars} StringWithVars */\r\n/** @typedef {import('../BookReader/PageContainer.js').PageContainer} PageContainer */\r\n\r\nconst BookReader = /** @type {typeof import('../BookReader').default} */(window.BookReader);\r\n\r\nexport const DEFAULT_OPTIONS = {\r\n  enabled: true,\r\n  /** @type {StringWithVars} The URL to fetch the entire DJVU xml. Supports options.vars */\r\n  fullDjvuXmlUrl: null,\r\n  /** @type {StringWithVars} The URL to fetch a single page of the DJVU xml. Supports options.vars. Also has {{pageIndex}} */\r\n  singlePageDjvuXmlUrl: null,\r\n  /** Whether to fetch the XML as a jsonp */\r\n  jsonp: false,\r\n};\r\n/** @typedef {typeof DEFAULT_OPTIONS} TextSelectionPluginOptions */\r\n\r\n/**\r\n * @template T\r\n */\r\nexport class Cache {\r\n  constructor(maxSize = 10) {\r\n    this.maxSize = maxSize;\r\n    /** @type {T[]} */\r\n    this.entries = [];\r\n  }\r\n\r\n  /**\r\n   * @param {T} entry\r\n   */\r\n  add(entry) {\r\n    if (this.entries.length >= this.maxSize) {\r\n      this.entries.shift();\r\n    }\r\n    this.entries.push(entry);\r\n  }\r\n}\r\n\r\nexport class TextSelectionPlugin {\r\n\r\n  constructor(options = DEFAULT_OPTIONS, optionVariables, avoidTspans = isFirefox(), pointerEventsOnParagraph = isSafari()) {\r\n    this.options = options;\r\n    this.optionVariables = optionVariables;\r\n    /**@type {PromiseLike<JQuery<HTMLElement>|undefined>} */\r\n    this.djvuPagesPromise = null;\r\n    // Using text elements instead of tspans for words because Firefox does not allow svg tspan stretch.\r\n    // Tspans are necessary on Chrome because they prevent newline character after every word when copying\r\n    this.svgParagraphElement = \"text\";\r\n    this.svgWordElement = \"tspan\";\r\n    this.insertNewlines = avoidTspans;\r\n    // Safari has a bug where `pointer-events` doesn't work on `<tspans>`. So\r\n    // there we will set `pointer-events: all` on the paragraph element. We don't\r\n    // do this everywhere, because it's a worse experience. Thanks Safari :/\r\n    this.pointerEventsOnParagraph = pointerEventsOnParagraph;\r\n    if (avoidTspans) {\r\n      this.svgParagraphElement = \"g\";\r\n      this.svgWordElement = \"text\";\r\n    }\r\n\r\n    /** @type {Cache<{index: number, response: any}>} */\r\n    this.pageTextCache = new Cache();\r\n\r\n    /**\r\n     * Sometimes there are too many words on a page, and the browser becomes near\r\n     * unusable. For now don't render text layer for pages with too many words.\r\n     */\r\n    this.maxWordRendered = 2500;\r\n  }\r\n\r\n  init() {\r\n    // Only fetch the full djvu xml if the single page url isn't there\r\n    if (this.options.singlePageDjvuXmlUrl) return;\r\n    this.djvuPagesPromise = $.ajax({\r\n      type: \"GET\",\r\n      url: applyVariables(this.options.fullDjvuXmlUrl, this.optionVariables),\r\n      dataType: this.options.jsonp ? \"jsonp\" : \"html\",\r\n      cache: true,\r\n      error: (e) => undefined\r\n    }).then((res) => {\r\n      try {\r\n        const xmlMap = $.parseXML(res);\r\n        return xmlMap && $(xmlMap).find(\"OBJECT\");\r\n      } catch (e) {\r\n        return undefined;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Promise<HTMLElement|undefined>}\r\n   */\r\n  async getPageText(index) {\r\n    if (this.options.singlePageDjvuXmlUrl) {\r\n      const cachedEntry = this.pageTextCache.entries.find(x => x.index == index);\r\n      if (cachedEntry) {\r\n        return cachedEntry.response;\r\n      }\r\n      const res = await $.ajax({\r\n        type: \"GET\",\r\n        url: applyVariables(this.options.singlePageDjvuXmlUrl, this.optionVariables, { pageIndex: index }),\r\n        dataType: this.options.jsonp ? \"jsonp\" : \"html\",\r\n        cache: true,\r\n        error: (e) => undefined,\r\n      });\r\n      try {\r\n        const xmlDoc = $.parseXML(res);\r\n        const result = xmlDoc && $(xmlDoc).find(\"OBJECT\")[0];\r\n        this.pageTextCache.add({ index, response: result });\r\n        return result;\r\n      } catch (e) {\r\n        return undefined;\r\n      }\r\n    } else {\r\n      const XMLpagesArr = await this.djvuPagesPromise;\r\n      if (XMLpagesArr) return XMLpagesArr[index];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Intercept copied text to remove any styling applied to it\r\n   * @param {JQuery} $container\r\n   */\r\n  interceptCopy($container) {\r\n    $container[0].addEventListener('copy', (event) => {\r\n      const selection = document.getSelection();\r\n      event.clipboardData.setData('text/plain', selection.toString());\r\n      event.preventDefault();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Applies mouse events when in default mode\r\n   * @param {SVGElement} svg\r\n   */\r\n  defaultMode(svg) {\r\n    svg.classList.remove(\"selectingSVG\");\r\n    $(svg).on(\"mousedown.textSelectPluginHandler\", (event) => {\r\n      if (!$(event.target).is(\".BRwordElement\")) return;\r\n      event.stopPropagation();\r\n      svg.classList.add(\"selectingSVG\");\r\n      $(svg).one(\"mouseup.textSelectPluginHandler\", (event) => {\r\n        if (window.getSelection().toString() != \"\") {\r\n          event.stopPropagation();\r\n          $(svg).off(\".textSelectPluginHandler\");\r\n          this.textSelectingMode(svg);\r\n        }\r\n        else svg.classList.remove(\"selectingSVG\");\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Applies mouse events when in textSelecting mode\r\n   * @param {SVGElement} svg\r\n   */\r\n  textSelectingMode(svg) {\r\n    $(svg).on('mousedown.textSelectPluginHandler', (event) => {\r\n      if (!$(event.target).is(\".BRwordElement\")) {\r\n        if (window.getSelection().toString() != \"\") window.getSelection().removeAllRanges();\r\n      }\r\n      event.stopPropagation();\r\n    });\r\n    $(svg).on('mouseup.textSelectPluginHandler', (event) => {\r\n      event.stopPropagation();\r\n      if (window.getSelection().toString() == \"\") {\r\n        $(svg).off(\".textSelectPluginHandler\");\r\n        this.defaultMode(svg);      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initializes text selection modes if there is an svg on the page\r\n   * @param {JQuery} $container\r\n   */\r\n  stopPageFlip($container) {\r\n    /** @type {JQuery<SVGElement>} */\r\n    const $svg = $container.find('svg.textSelectionSVG');\r\n    if (!$svg.length) return;\r\n    $svg.each((i, s) => this.defaultMode(s));\r\n    this.interceptCopy($container);\r\n  }\r\n\r\n  /**\r\n   * @param {PageContainer} pageContainer\r\n   */\r\n  async createTextLayer(pageContainer) {\r\n    const pageIndex = pageContainer.page.index;\r\n    const $container = pageContainer.$container;\r\n    const $svgLayers = $container.find('.textSelectionSVG');\r\n    if ($svgLayers.length) return;\r\n    const XMLpage = await this.getPageText(pageIndex);\r\n    if (!XMLpage) return;\r\n\r\n    const totalWords = $(XMLpage).find(\"WORD\").length;\r\n    if (totalWords > this.maxWordRendered) {\r\n      console.log(`Page ${pageIndex} has too many words (${totalWords} > ${this.maxWordRendered}). Not rendering text layer.`);\r\n      return;\r\n    }\r\n\r\n    const svg = createSVGPageLayer(pageContainer.page, 'textSelectionSVG');\r\n    $container.append(svg);\r\n\r\n    $(XMLpage).find(\"PARAGRAPH\").each((i, paragraph) => {\r\n      // Adding text element for each paragraph in the page\r\n      const words = $(paragraph).find(\"WORD\");\r\n      if (!words.length) return;\r\n      const paragSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", this.svgParagraphElement);\r\n      paragSvg.setAttribute(\"class\", \"BRparagElement\");\r\n      if (this.pointerEventsOnParagraph) {\r\n        paragSvg.style.pointerEvents = \"all\";\r\n      }\r\n\r\n      const wordHeightArr = [];\r\n\r\n      for (let i = 0; i < words.length; i++) {\r\n        // Adding tspan for each word in paragraph\r\n        const currWord = words[i];\r\n        // eslint-disable-next-line no-unused-vars\r\n        const [left, bottom, right, top] = $(currWord).attr(\"coords\").split(',').map(parseFloat);\r\n        const wordHeight = bottom - top;\r\n        wordHeightArr.push(wordHeight);\r\n\r\n        const wordTspan = document.createElementNS(\"http://www.w3.org/2000/svg\", this.svgWordElement);\r\n        wordTspan.setAttribute(\"class\", \"BRwordElement\");\r\n        wordTspan.setAttribute(\"x\", left.toString());\r\n        wordTspan.setAttribute(\"y\", bottom.toString());\r\n        wordTspan.setAttribute(\"textLength\", (right - left).toString());\r\n        wordTspan.setAttribute(\"lengthAdjust\", \"spacingAndGlyphs\");\r\n        wordTspan.textContent = currWord.textContent;\r\n        paragSvg.appendChild(wordTspan);\r\n\r\n        // Adding spaces after words except at the end of the paragraph\r\n        // TODO: assumes left-to-right text\r\n        if (i < words.length - 1) {\r\n          const nextWord = words[i + 1];\r\n          // eslint-disable-next-line no-unused-vars\r\n          const [leftNext, bottomNext, rightNext, topNext] = $(nextWord).attr(\"coords\").split(',').map(parseFloat);\r\n          const spaceTspan = document.createElementNS(\"http://www.w3.org/2000/svg\", this.svgWordElement);\r\n          spaceTspan.setAttribute(\"class\", \"BRwordElement\");\r\n          spaceTspan.setAttribute(\"x\", right.toString());\r\n          spaceTspan.setAttribute(\"y\", bottom.toString());\r\n          if ((leftNext - right) > 0) spaceTspan.setAttribute(\"textLength\", (leftNext - right).toString());\r\n          spaceTspan.setAttribute(\"lengthAdjust\", \"spacingAndGlyphs\");\r\n          spaceTspan.textContent = \" \";\r\n          paragSvg.appendChild(spaceTspan);\r\n        }\r\n\r\n        // Adds newline at the end of paragraph on Firefox\r\n        if ((i ==  words.length - 1 && (this.insertNewlines))) {\r\n          paragSvg.appendChild(document.createTextNode(\"\\n\"));\r\n        }\r\n      }\r\n\r\n      wordHeightArr.sort();\r\n      const paragWordHeight = wordHeightArr[Math.floor(wordHeightArr.length * 0.85)];\r\n      paragSvg.setAttribute(\"font-size\", paragWordHeight.toString());\r\n      svg.appendChild(paragSvg);\r\n    });\r\n    this.stopPageFlip($container);\r\n  }\r\n}\r\n\r\nexport class BookreaderWithTextSelection extends BookReader {\r\n  init() {\r\n    const options = Object.assign({}, DEFAULT_OPTIONS, this.options.plugins.textSelection);\r\n    if (options.enabled) {\r\n      this.textSelectionPlugin = new TextSelectionPlugin(options, this.options.vars);\r\n      // Write this back; this way the plugin is the source of truth, and BR just\r\n      // contains a reference to it.\r\n      this.options.plugins.textSelection = options;\r\n      this.textSelectionPlugin.init();\r\n\r\n      // Track how often selection is used\r\n      const sso = new SelectionStartedObserver('.textSelectionSVG', () => {\r\n        // Don't assume the order of the plugins ; the analytics plugin could\r\n        // have been added later. But at this point we should know for certain.\r\n        if (!this.archiveAnalyticsSendEvent) {\r\n          sso.detach();\r\n        } else {\r\n          this.archiveAnalyticsSendEvent('BookReader', 'SelectStart');\r\n        }\r\n      });\r\n      sso.attach();\r\n    }\r\n\r\n    super.init();\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  _createPageContainer(index) {\r\n    const pageContainer = super._createPageContainer(index);\r\n    // Disable if thumb mode; it's too janky\r\n    // .page can be null for \"pre-cover\" region\r\n    if (this.mode !== this.constModeThumb && pageContainer.page) {\r\n      this.textSelectionPlugin?.createTextLayer(pageContainer);\r\n    }\r\n    return pageContainer;\r\n  }\r\n}\r\nwindow.BookReader = BookreaderWithTextSelection;\r\nexport default BookreaderWithTextSelection;\r\n","\r\n/**\r\n * Checks whether the current browser is a Chrome/Chromium browser\r\n * Code from https://stackoverflow.com/a/4565120/2317712\r\n * @param {string} [userAgent]\r\n * @param {string} [vendor]\r\n * @return {boolean}\r\n */\r\nexport function isChrome(userAgent = navigator.userAgent, vendor = navigator.vendor) {\r\n  return /chrome/i.test(userAgent) && /google inc/i.test(vendor);\r\n}\r\n\r\n/**\r\n * Checks whether the current browser is firefox\r\n * @param {string} [userAgent]\r\n * @return {boolean}\r\n */\r\nexport function isFirefox(userAgent = navigator.userAgent) {\r\n  return /firefox/i.test(userAgent);\r\n}\r\n\r\n/**\r\n * Checks whether the current browser is safari\r\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent#Browser_Name\r\n * @param {string} [userAgent]\r\n * @return {boolean}\r\n */\r\nexport function isSafari(userAgent = navigator.userAgent) {\r\n  return /safari/i.test(userAgent) && !/chrome|chromium/i.test(userAgent);\r\n}\r\n","var global = require('../internals/global');\nvar fails = require('../internals/fails');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toString = require('../internals/to-string');\nvar trim = require('../internals/string-trim').trim;\nvar whitespaces = require('../internals/whitespaces');\n\nvar charAt = uncurryThis(''.charAt);\nvar n$ParseFloat = global.parseFloat;\nvar Symbol = global.Symbol;\nvar ITERATOR = Symbol && Symbol.iterator;\nvar FORCED = 1 / n$ParseFloat(whitespaces + '-0') !== -Infinity\n  // MS Edge 18- broken with boxed symbols\n  || (ITERATOR && !fails(function () { n$ParseFloat(Object(ITERATOR)); }));\n\n// `parseFloat` method\n// https://tc39.es/ecma262/#sec-parsefloat-string\nmodule.exports = FORCED ? function parseFloat(string) {\n  var trimmedString = trim(toString(string));\n  var result = n$ParseFloat(trimmedString);\n  return result === 0 && charAt(trimmedString, 0) == '-' ? -0 : result;\n} : n$ParseFloat;\n","var PROPER_FUNCTION_NAME = require('../internals/function-name').PROPER;\nvar fails = require('../internals/fails');\nvar whitespaces = require('../internals/whitespaces');\n\nvar non = '\\u200B\\u0085\\u180E';\n\n// check that a method works with the correct list\n// of whitespaces and has a correct name\nmodule.exports = function (METHOD_NAME) {\n  return fails(function () {\n    return !!whitespaces[METHOD_NAME]()\n      || non[METHOD_NAME]() !== non\n      || (PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME);\n  });\n};\n","var $ = require('../internals/export');\nvar $parseFloat = require('../internals/number-parse-float');\n\n// `parseFloat` method\n// https://tc39.es/ecma262/#sec-parsefloat-string\n$({ global: true, forced: parseFloat != $parseFloat }, {\n  parseFloat: $parseFloat\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar $trim = require('../internals/string-trim').trim;\nvar forcedStringTrimMethod = require('../internals/string-trim-forced');\n\n// `String.prototype.trim` method\n// https://tc39.es/ecma262/#sec-string.prototype.trim\n$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {\n  trim: function trim() {\n    return $trim(this);\n  }\n});\n"],"names":["SelectionStartedObserver","selector","handler","ev","loggedForSelection","startedInSelector","$","target","closest","length","window","getSelection","toString","this","document","addEventListener","_onSelectStart","_onSelectionChange","removeEventListener","applyVariables","template","vars","overrides","possibleFilters","APPLY_FILTERS","replace","$0","$1","split","map","x","trim","varName","filterNames","value","n","reduce","acc","cur","urlencode","encodeURIComponent","BookReader","DEFAULT_OPTIONS","enabled","fullDjvuXmlUrl","singlePageDjvuXmlUrl","jsonp","Cache","maxSize","entries","entry","shift","push","TextSelectionPlugin","options","optionVariables","avoidTspans","isFirefox","pointerEventsOnParagraph","isSafari","djvuPagesPromise","svgParagraphElement","svgWordElement","insertNewlines","pageTextCache","maxWordRendered","ajax","type","url","dataType","cache","error","e","then","res","xmlMap","parseXML","find","index","cachedEntry","response","pageIndex","xmlDoc","result","add","undefined","XMLpagesArr","$container","event","selection","clipboardData","setData","preventDefault","svg","classList","remove","on","is","stopPropagation","one","off","textSelectingMode","removeAllRanges","defaultMode","$svg","each","i","s","interceptCopy","pageContainer","page","getPageText","XMLpage","totalWords","console","log","createSVGPageLayer","append","paragraph","words","paragSvg","createElementNS","setAttribute","style","pointerEvents","wordHeightArr","currWord","attr","parseFloat","left","bottom","right","wordHeight","wordTspan","textContent","appendChild","nextWord","leftNext","spaceTspan","createTextNode","sort","paragWordHeight","Math","floor","stopPageFlip","BookreaderWithTextSelection","Object","assign","plugins","textSelection","textSelectionPlugin","init","sso","archiveAnalyticsSendEvent","detach","attach","mode","constModeThumb","createTextLayer","isChrome","userAgent","navigator","vendor","test","global","fails","uncurryThis","whitespaces","charAt","n$ParseFloat","Symbol","ITERATOR","iterator","FORCED","module","exports","string","trimmedString","PROPER_FUNCTION_NAME","METHOD_NAME","name","$parseFloat","forced","$trim","proto","forcedStringTrimMethod"],"sourceRoot":""}